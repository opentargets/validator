[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opentargets-validator"
dynamic = ["version"]
description = "Schema validation for evidence submitted to Open Targets"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Open Targets", email = "data@opentargets.org"}
]
maintainers = [
    {name = "Open Targets", email = "data@opentargets.org"}
]
keywords = ["opentargets", "bioinformatics", "python3"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8.1"
dependencies = [
    "fastjsonschema>=2.18.0",
    "pathos>=0.3.1",
]

[project.optional-dependencies]
dev = [
    "build",
    "codecov",
    "pytest",
    "pytest-cov",
    "twine",
    "uv",
    "ruff",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
lint = [
    "ruff",
    "mypy",
]
build = [
    "build",
    "twine",
]

[project.urls]
Homepage = "https://github.com/opentargets/validator"
Repository = "https://github.com/opentargets/validator"
Documentation = "https://github.com/opentargets/validator#readme"
"Bug Tracker" = "https://github.com/opentargets/validator/issues"

[project.scripts]
opentargets_validator = "opentargets_validator.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["opentargets_validator"]

[tool.hatch.build.targets.wheel.sources]
"opentargets_validator" = "opentargets_validator"

[tool.hatch.build.targets.wheel.force-include]
"opentargets_validator/resources" = "opentargets_validator/resources"

[tool.hatch.build.targets.sdist]
include = [
    "/opentargets_validator",
    "/tests",
    "/scripts",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.version]
path = "opentargets_validator/version.py"


# uv configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "codecov>=2.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["opentargets_validator"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF",  # ruff-specific rules
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow relative imports
    "TID252",
    # Allow unused arguments in abstract methods
    "ARG002",
    # Allow long lines in docstrings and comments
    "E501",
    # Allow single letter variable names in comprehensions
    "PLR2004",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of `assert` detected
    "TID252",   # Relative imports are banned
    "ARG",      # Unused function arguments
    "FBT",      # Boolean positional arguments
    "PLR0913",  # Too many arguments
]

# Allow print statements in scripts
"scripts/**/*.py" = [
    "T201",     # print found
]

[tool.ruff.lint.isort]
known-first-party = ["opentargets_validator"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"
